<Node(Arel::SqlToArel::Result) []
  sql = SELECT 1, 2 FROM "posts" WHERE "id" = 1
  parent = nil
  0 =
    <Node(Arel::SelectManager) [0]
      sql = SELECT 1, 2 FROM "posts" WHERE "id" = 1
      parent = Node(Arel::SqlToArel::Result)
      ast =
        <Node(Arel::Nodes::SelectStatement) [0, 'ast']
          sql = SELECT 1, 2 FROM "posts" WHERE "id" = 1
          parent = Node(Arel::SelectManager)
          cores =
            <Node(Array) [0, 'ast', 'cores']
              sql = SELECT 1, 2 FROM "posts" WHERE "id" = 1
              parent = Node(Arel::Nodes::SelectStatement)
              0 =
                <Node(Arel::Nodes::SelectCore) [0, 'ast', 'cores', 0]
                  sql = SELECT 1, 2 FROM "posts" WHERE "id" = 1
                  parent = Node(Array)
                  source =
                    <Node(Arel::Nodes::JoinSource) [0, 'ast', 'cores', 0, 'source']
                      sql = "posts"
                      parent = Node(Arel::Nodes::SelectCore)
                      left =
                        <Node(Arel::Table) [0, 'ast', 'cores', 0, 'source', 'left']
                          sql = "posts"
                          parent = Node(Arel::Nodes::JoinSource)
                          name =
                            <Node(String) [0, 'ast', 'cores', 0, 'source', 'left', 'name']
                              parent = Node(Arel::Table)
                              value = "posts">
                          only =
                            <Node(FalseClass) [0, 'ast', 'cores', 0, 'source', 'left', 'only']
                              parent = Node(Arel::Table)
                              value = false>
                          schema_name =
                            <Node(NilClass) [0, 'ast', 'cores', 0, 'source', 'left', 'schema_name']
                              parent = Node(Arel::Table)
                              value = nil>
                          relpersistence =
                            <Node(String) [0, 'ast', 'cores', 0, 'source', 'left', 'relpersistence']
                              parent = Node(Arel::Table)
                              value = "p">
                          type_caster =
                            <Node(NilClass) [0, 'ast', 'cores', 0, 'source', 'left', 'type_caster']
                              parent = Node(Arel::Table)
                              value = nil>
                        >
                      right =
                        <Node(Array) [0, 'ast', 'cores', 0, 'source', 'right']
                          parent = Node(Arel::Nodes::JoinSource)
                          value = nil>
                    >
                  projections =
                    <Node(Array) [0, 'ast', 'cores', 0, 'projections']
                      sql = 1, 2
                      parent = Node(Arel::Nodes::SelectCore)
                      0 =
                        <Node(Integer) [0, 'ast', 'cores', 0, 'projections', 0]
                          parent = Node(Array)
                          value = 1>
                      1 =
                        <Node(Integer) [0, 'ast', 'cores', 0, 'projections', 1]
                          parent = Node(Array)
                          value = 2>
                    >
                  wheres =
                    <Node(Array) [0, 'ast', 'cores', 0, 'wheres']
                      sql = "id" = 1
                      parent = Node(Arel::Nodes::SelectCore)
                      0 =
                        <Node(Arel::Nodes::And) [0, 'ast', 'cores', 0, 'wheres', 0]
                          sql = "id" = 1
                          parent = Node(Array)
                          children =
                            <Node(Array) [0, 'ast', 'cores', 0, 'wheres', 0, 'children']
                              sql = "id" = 1
                              parent = Node(Arel::Nodes::And)
                              0 =
                                <Node(Arel::Nodes::Equality) [0, 'ast', 'cores', 0, 'wheres', 0, 'children', 0]
                                  sql = "id" = 1
                                  parent = Node(Array)
                                  left =
                                    <Node(Arel::Nodes::UnqualifiedColumn) [0, 'ast', 'cores', 0, 'wheres', 0, 'children', 0, 'left']
                                      sql = "id"
                                      parent = Node(Arel::Nodes::Equality)
                                      expr =
                                        <Node(Arel::Attributes::Attribute) [0, 'ast', 'cores', 0, 'wheres', 0, 'children', 0, 'left', 'expr']
                                          sql = "id"
                                          parent = Node(Arel::Nodes::UnqualifiedColumn)
                                          relation =
                                            <Node(NilClass) [0, 'ast', 'cores', 0, 'wheres', 0, 'children', 0, 'left', 'expr', 'relation']
                                              parent = Node(Arel::Attributes::Attribute)
                                              value = nil>
                                          name =
                                            <Node(String) [0, 'ast', 'cores', 0, 'wheres', 0, 'children', 0, 'left', 'expr', 'name']
                                              parent = Node(Arel::Attributes::Attribute)
                                              value = "id">
                                          schema_name =
                                            <Node(NilClass) [0, 'ast', 'cores', 0, 'wheres', 0, 'children', 0, 'left', 'expr', 'schema_name']
                                              parent = Node(Arel::Attributes::Attribute)
                                              value = nil>
                                          database =
                                            <Node(NilClass) [0, 'ast', 'cores', 0, 'wheres', 0, 'children', 0, 'left', 'expr', 'database']
                                              parent = Node(Arel::Attributes::Attribute)
                                              value = nil>
                                        >
                                    >
                                  right =
                                    <Node(Integer) [0, 'ast', 'cores', 0, 'wheres', 0, 'children', 0, 'right']
                                      parent = Node(Arel::Nodes::Equality)
                                      value = 1>
                                >
                            >
                        >
                    >
                  windows =
                    <Node(Array) [0, 'ast', 'cores', 0, 'windows']
                      parent = Node(Arel::Nodes::SelectCore)
                      value = nil>
                  groups =
                    <Node(Array) [0, 'ast', 'cores', 0, 'groups']
                      parent = Node(Arel::Nodes::SelectCore)
                      value = nil>
                  comment =
                    <Node(NilClass) [0, 'ast', 'cores', 0, 'comment']
                      parent = Node(Arel::Nodes::SelectCore)
                      value = nil>
                  havings =
                    <Node(Array) [0, 'ast', 'cores', 0, 'havings']
                      parent = Node(Arel::Nodes::SelectCore)
                      value = nil>
                  set_quantifier =
                    <Node(NilClass) [0, 'ast', 'cores', 0, 'set_quantifier']
                      parent = Node(Arel::Nodes::SelectCore)
                      value = nil>
                  optimizer_hints =
                    <Node(NilClass) [0, 'ast', 'cores', 0, 'optimizer_hints']
                      parent = Node(Arel::Nodes::SelectCore)
                      value = nil>
                  into =
                    <Node(NilClass) [0, 'ast', 'cores', 0, 'into']
                      parent = Node(Arel::Nodes::SelectCore)
                      value = nil>
                  top =
                    <Node(NilClass) [0, 'ast', 'cores', 0, 'top']
                      parent = Node(Arel::Nodes::SelectCore)
                      value = nil>
                >
            >
          limit =
            <Node(NilClass) [0, 'ast', 'limit']
              parent = Node(Arel::Nodes::SelectStatement)
              value = nil>
          orders =
            <Node(Array) [0, 'ast', 'orders']
              parent = Node(Arel::Nodes::SelectStatement)
              value = nil>
          offset =
            <Node(NilClass) [0, 'ast', 'offset']
              parent = Node(Arel::Nodes::SelectStatement)
              value = nil>
          lock =
            <Node(NilClass) [0, 'ast', 'lock']
              parent = Node(Arel::Nodes::SelectStatement)
              value = nil>
          with =
            <Node(NilClass) [0, 'ast', 'with']
              parent = Node(Arel::Nodes::SelectStatement)
              value = nil>
          union =
            <Node(NilClass) [0, 'ast', 'union']
              parent = Node(Arel::Nodes::SelectStatement)
              value = nil>
          values_lists =
            <Node(NilClass) [0, 'ast', 'values_lists']
              parent = Node(Arel::Nodes::SelectStatement)
              value = nil>
        >
    >
>
