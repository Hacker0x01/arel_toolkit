name: Test
on:
  push:
  pull_request:

jobs:
  rspec:
    name: RSpec
    runs-on: ubuntu-latest
    services:
      postgres:
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        image: postgres:10.10
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: arel_toolkit_test
          POSTGRES_USER: postgres
    steps:
    # From https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    - env:
        GITHUB: ${{ toJson(github) }}
        ENV: ${{ toJson(env) }}
        JOB: ${{ toJson(job) }}
        STEPS: ${{ toJson(steps) }}
        RUNNER: ${{ toJson(runner) }}
        SECRETS: ${{ toJson(secrets) }}
        STRATEGY: ${{ toJson(strategy) }}
        MATRIX: ${{ toJson(matrix) }}
        NEEDS: ${{ toJson(needs) }}
      run: |
        env
    # - uses: actions/checkout@v2
    # - name: Install dependencies
    #   run: sudo apt-get install -y libpq-dev
    # - uses: ruby/setup-ruby@v1
    #   with:
    #     bundler-cache: true
    # - run: bundle exec appraisal install
    # - name: Compile extension
    #   run: |
    #     bundle exec rake clean
    #     bundle exec rake compile
    # - name: Start coverage
    #   run: |
    #     curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
    #     chmod +x ./cc-test-reporter
    #     ./cc-test-reporter before-build
    # - name: RSpec
    #   run: |
    #     bundle exec appraisal rspec --force-color
    - run: mkdir -p ./coverage
    - run: touch ./coverage/THE_COVERAGE
    - uses: actions/upload-artifact@v2
      with:
        name: rspec-coverage
        path: ./coverage

    # # TODO: upload coverage information to github artifacts as described here
    # # https://github.com/codeclimate/test-reporter/issues/406#issuecomment-847567660
    # # Setup a different workflow which uploads the coverage report into code climate
    # - name: Report to codeclimate
    #   if: always() && matrix.codeclimate
    #   shell: bash
    #   env:
    #     JOB_STATUS: ${{ job.status == 'Success' }}
    #     CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
    #   run: |
    #     EXIT_CODE=$([[ "$JOB_STATUS" == true ]] && echo 0 || echo 1)
    #     ./cc-test-reporter after-build --exit-code $EXIT_CODE
