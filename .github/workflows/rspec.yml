name: RSpec
on: [push]

jobs:
  brokenjob:
    runs-on: ubuntu-latest
    steps:
      - name: lebreak
        id: step1
        run: exit 1
      - name: doit
        id: step2
        env:
          Z_GITHUB_CONTEXT: ${{ toJson(github) }}
          Z_JOB_CONTEXT: ${{ toJson(job) }}
          Z_STEPS_CONTEXT: ${{ toJson(steps) }}
          Z_RUNNER_CONTEXT: ${{ toJson(runner) }}
          Z_SECRETS_CONTEXT: ${{ toJson(secrets) }}
          Z_STRATEGY_CONTEXT: ${{ toJson(strategy) }}
          Z_MATRIX_CONTEXT: ${{ toJson(matrix) }}
          Z_FAILURE: ${{ job.status == 'Failure' }}
        if: always()
        run: |
          env

  workingjob:
    runs-on: ubuntu-latest
    steps:
      - name: work
        run: exit 0
      - name: doit
        env:
          Z_GITHUB_CONTEXT: ${{ toJson(github) }}
          Z_JOB_CONTEXT: ${{ toJson(job) }}
          Z_STEPS_CONTEXT: ${{ toJson(steps) }}
          Z_RUNNER_CONTEXT: ${{ toJson(runner) }}
          Z_SECRETS_CONTEXT: ${{ toJson(secrets) }}
          Z_STRATEGY_CONTEXT: ${{ toJson(strategy) }}
          Z_MATRIX_CONTEXT: ${{ toJson(matrix) }}
          Z_FAILURE: ${{ job.status == 'Failure' }}
        if: always()
        run: |
          env

  # one:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Dump GitHub context
  #       env:
  #         GITHUB_CONTEXT: ${{ toJson(github) }}
  #       run: echo "$GITHUB_CONTEXT"
  #     - name: Dump job context
  #       env:
  #         JOB_CONTEXT: ${{ toJson(job) }}
  #       run: echo "$JOB_CONTEXT"
  #     - name: Dump steps context
  #       env:
  #         STEPS_CONTEXT: ${{ toJson(steps) }}
  #       run: echo "$STEPS_CONTEXT"
  #     - name: Dump runner context
  #       env:
  #         RUNNER_CONTEXT: ${{ toJson(runner) }}
  #       run: echo "$RUNNER_CONTEXT"
  #     - name: Dump strategy context
  #       env:
  #         STRATEGY_CONTEXT: ${{ toJson(strategy) }}
  #       run: echo "$STRATEGY_CONTEXT"
  #     - name: Dump matrix context
  #       env:
  #         MATRIX_CONTEXT: ${{ toJson(matrix) }}
  #       run: echo "$MATRIX_CONTEXT"

  # postgres:
  #   name: Test postgres
  #   runs-on: ubuntu-latest
  #   services:
  #     postgres:
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       image: postgres:10.10
  #       ports:
  #         - 5432:5432
  #       env:
  #         POSTGRES_DB: arel_toolkit_test
  #         POSTGRES_USER: postgres
  #   steps:
  #   - run: sudo apt-get install -y postgresql-client-10
  #   - run: pg_isready -h postgres -p 5432 -U postgres -d arel_toolkit_test || true
  #   - run: pg_isready -h localhost -p 5432 -U postgres -d arel_toolkit_test || true
  #   - run: pg_isready -h 127.0.0.1 -p 5432 -U postgres -d arel_toolkit_test || true

  # services:
  #   name: Test services
  #   runs-on: ubuntu-latest
  #   services:
  #     nginx:
  #       image: nginx
  #       ports:
  #         - 8080:80
  #       env:
  #         NGINX_PORT: 80
  #   steps:
  #   - run: curl -v localhost:8080 || true
  #   - run: curl -v nginx:8080 || true
  #   - run: curl -v 127.0.0.1:8080 || true

  # artifact:
  #   name: Artifact upload?
  #   runs-on: ubuntu-latest
  #   steps:
  #   - run: mkdir -p path/to/artifact
  #   - run: echo hello > path/to/artifact/world.txt
  #   - uses: actions/upload-artifact@master
  #     with:
  #       name: my-artifact
  #       path: path/to/artifact

  rspec:
    name: Greeting
    runs-on: ubuntu-latest
    services:
      postgres:
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        image: postgres:10.10
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: arel_toolkit_test
          POSTGRES_USER: postgres
    steps:
    - uses: actions/checkout@v1
    - name: Set up Ruby 2.5.x
      uses: actions/setup-ruby@v1
      with:
        ruby-version: 2.5.x
    - name: Setup
      run: |
        curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
        chmod +x ./cc-test-reporter
        ./cc-test-reporter before-build

        sudo apt-get install -y libpq-dev

        gem install bundler

        bundle install --jobs 4 --retry 3
        bundle exec appraisal install

        bundle exec rake clean
        bundle exec rake compile

    - name: RSpec
      run: |
        bundle exec appraisal rspec

    - name: Report to codeclimate
      if: always()
      env:
        JOB_STATUS: ${{ job.status == 'Success' }}
      run: |
        ./cc-test-reporter after-build --exit-code $JOB_STATUS
